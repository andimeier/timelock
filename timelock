#!/bin/bash
#
# kopiert ein File auf einen Remote-Server und startet lokal wie remote
# das selbe Programm: das angegebene File wird verschluesselt und erst 
# nach der angegebenen Zeit wieder entschl√ºsselt. Dazwischen ist der
# Encryption-Key (zufaellig erzeugt) nur im Memory. Eine reelle Chance, das
# File wieder zureckzuerhalten, gibt es also praktisch nur nach dem 
# Zeitablauf.
#
# Das Kopieren auf den remote-Server und das temporaere Verschluesseln dort
# passiert mit der selben Methode. Das soll ein Backup sein: falls lokal 
# das Programm abstuerzt oder sonst irgendetwas passiert, wird wenigstens 
# remote nach dem Zeitablauf ebenfalls das Originalfile wiederhergestellt.
#
# Usage:
#   timelock FILE TIME
# Parameters:
#   FILE ... File to be encrypted temporarily
#   TIME ... amount of time before automatically decrypting the file


SCP_TARGET=fritz@eck-zimmer.at:/home/fritz


function printUsage {
	cat <<EOT
Usage:
  timelock FILE TIME 
Parameters:
  FILE ... File to be encrypted temporarily
  TIME ... amount of time before automatically decrypting the file
           format: 1h30m10s or 10s or 10m or ...
EOT
	exit 0
}

function normal {
	echo -e "\e[39m"
}

function red {
	echo -e "\e[31m"
}

function green {
	echo -e "\e[32m"
}

function blue {
	echo -e "\e[34m"
}

function yellow {
	echo -e "\e[33m"
}


if [ "$1" == "" ] ; then
	printUsage
fi

# parse command line parameters
WIN_FILE=$1
TIME=$2


if [ "$WIN_FILE" == "" ] ; then
	red
	echo "Missing parameter #1: file to be encrypted"
	normal
	exit 1
fi

FILE=`echo $WIN_FILE | sed 's@^\(.\):@/cygdrive/\1@' | sed 's@\\\\@/@g' `

echo File is: $FILE

if [ ! -e $FILE ] ; then
	red
	echo "File not found: $FILE"
	echo "Be sure to use Windows File Path ('D:\Temp\test.jpg') and use single quotes."
	normal
	exit 1
fi

#/cygdrive/c/Program\ Files\ \(x86\)/ACDSee32/ACDSee32.exe $WIN_FILE

# let Cygwin launch the default Windows application for this file
cygstart $WIN_FILE


if [ "$TIME" == "" ] ; then
	red
	echo "Missing parameter TIME"
	normal
	exit 1
fi

PWD=`tr -dc "[:alnum:]" </dev/urandom | head -c 80`
TOKEN=`tr -dc "[:alnum:]" </dev/urandom | head -c 20`

# get number of seconds
SECS=`parsetime $2`

if [ "$SECS" -eq 0 ] ; then
	red
	echo "Unable to parse timespan"
	normal
	exit 1
fi

# copy image file to server, as a backup ;)
REMOTE_FILE=`basename $FILE`
echo "Copying file to remote server ..."
scp $FILE $SCP_TARGET
echo "File [$REMOTE_FILE] has been copied to $SCP_TARGET ..."
REMOTE_LOCKFILE="/tmp/tempcrypt.$TOKEN.lock"
ssh fritz@eck-zimmer.at "sh -c 'nohup /home/fritz/bin/tempcrypt $REMOTE_FILE $SECS $REMOTE_LOCKFILE >>/tmp/tempcrypt.log 2>&1 &'"
	

echo "Remote encryption initiated."

# loop until we know that the remote encryption has started
echo "Checking if remote time lock has been started ..."
while true; do
	if ssh fritz@eck-zimmer.at "test -f $REMOTE_LOCKFILE"; then break; fi
	echo -n "."
	sleep 1
done
green
echo "Remote lock file found, so remote encryption has been done. Proceeding ..."
normal

# encrypt locally
echo "initiating local encryption ..."
yellow
tempcrypt $FILE $SECS
normal

# after tempcrypt returns, display the file, assuming it is an image file
# show image
#pqiv -f -t $FILE



#/cygdrive/c/Program\ Files\ \(x86\)/ACDSee32/ACDSee32.exe $WIN_FILE

# let Cygwin launch the default Windows application for this file
cygstart $WIN_FILE
