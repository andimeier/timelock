#!/bin/bash
#
# verschluesselt die angegebene Datei mit einem temporaeren Kennwort und
# entschluesselt sie wieder nach der angegebenen Zeit.
# Damit wird der Zugriff auf die Datei temporaer unmoeglich gemacht.
#
# Usage:
#   tempcrypt.sh FILE SECONDS LOCKFILE
# Parameters:
#   FILE ... File to be encrypted temporarily
#   SECONDS ... number of seconds before automatically decrypting the file
#   LOCKFILE ... lock file, which will be created when the file has been 
#     encrypted successfully. If such a lock file is provided,
#     then the program runs in "silent mode", no countdown shown.

FILE=$1
SECONDS=$2

if [ "$3" ] ; then
	LOCKFILE=$3
fi

function printUsage {
	cat <<EOT
Usage:
  tempcrypt.sh FILE SECONDS
Parameters:
  FILE ... File to be encrypted temporarily
  SECONDS ... number of seconds before automatically decrypting the file
EOT
	exit 0
}


# log to stdout or to log lockfile, depending on whether a lockfile 
# should be written or not
function log {
	if [ "$LOCKFILE" ] ; then
		echo $TEXT >>$LOCKFILE
	else
		echo $TEXT
	fi
}


# log to stdout, but only if no lockfile should be written ,
# otherwise do nothing
function stdout {
	if [ "$LOCKFILE" ] ; then
		:
	else
		echo $TEXT
	fi
}



if [ "$FILE" == "" ] ; then
	echo "Missing parameter #1: file to be encrypted"
	printUsage
	exit 1
fi
if [ ! -e $FILE ] ; then
	echo "File not found: $FILE"
	exit 1
fi


if [ "$SECONDS" == "" ] ; then
	echo "Missing parameter SECONDS"
	printUsage
	exit 1
fi

if [ ! "$SECONDS" -ge "5" ] ; then
	echo "Parameter SECONDS is $SECONDS, but must be 5 or greater"
	exit 1
fi

# a random password
PWD=`tr -dc "[:alnum:]" </dev/urandom | head -c 40`

ccrypt --encrypt -K $PWD $FILE
if [ "$LOCKFILE" ] ; then touch $LOCKFILE ; fi
log "File $FILE has been encrypted."
stdout "Starting countdown of $SECONDS seconds ..."

for i in `seq $SECONDS -1 0` ; do
	sleep 1
	HR_LEFT=$(( $i / 3600 ))
	i=$(( $i % 3600 ))
	MIN_LEFT=$(( $i / 60 ))
	SEC_LEFT=$(( $i % 60 ))
	
	# only print countdown if no lock file is specified. If a lock file is specified,
	# it is assumed to run in "backup mode", providing only a second encryption thread
	# in case the first should crash. This way the file can be recovered if the main
	# thread crashed by waiting for the "backup thread" to finish.
	if [ -z "$LOCKFILE" ] ; then
		printf "%02d:%02d:%02d until decryption ...\r" $HR_LEFT $MIN_LEFT $SEC_LEFT
	fi
done

ccrypt --decrypt -K $PWD $FILE
echo "File $FILE has been decrypted."

# delete lock file
if [ "$LOCKFILE" ] ; then rm $LOCKFILE ; fi

# show image
#pqiv -f -t $FILE

#/cygdrive/c/Program\ Files\ \(x86\)/ACDSee32/ACDSee32.exe $FILE
